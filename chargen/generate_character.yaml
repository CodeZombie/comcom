# Value Groups
model_values: &model_values
  load_checkpoint.ckpt_name: "model.safetensors"

upscale_model_values: &upscale_model_values
  Load Upscale Model.model_name: "ESRGAN_4x.pth"

# Common workflows
upscale_workflow: &upscale_workflow
  path: "upscale.json"
  values:
    upscale_amount: 0.5
  load:
    Load Mask.mask: extras/mask.png
    Load Image.image: "{^.output.save_image}"
  input:
    <<: *upscale_model_values
    Another Load Image.image: extras/mask.png
    Load Image.image: "{^.output.save_image}"
    Upscale Image By.scale_by: $upscale_amount
    $5.upscale_method: "bilinear" # We can refer to nodes by their ID to avoid ambiguity, if we want.
  output:
    Save Image: "{^.output.save_image}.upscaled"

globals:
  style: 
    positive: "masterpiece, best quality, beautiful"
    negative: "ugly, gross, bad, worst quality"
  image_description:
    positive: "A cute {{red|blue|purple}} {species}, {pose}, white background"
    negative: ""
  pose: "standing up, arms out"
  species: "tiny little alien dude"

workflows:
  generate_base_image:
    path: "chargen_workflow_double.json"
    values:
      id: "base_image"
      additional_prompt:
        positive: "eyes open, {{red|blue}} eyes"
      resolution:
        width: 512
        height: 1024
    input:
      <<: *model_values
      positive_prompt.text: "{style.positive}, {image_description.positive}"
      negative_prompt.text: "{style.negative}"
      empty_image: # We can refer to Nodes as dicts and assign their properties as key:val pairs.
        width: $resolution.width # "$varname" syntax will copy the value directly, without converting to a string. Good for numbers.
        height: $resolution.height
    output:
      save_image: "/base_image/{species}_{id}"

    workflows:
      upscale:
        <<: *upscale_workflow

# Let's think about using a `?node_name` to allow reverse-searches for nodes.
# As in, if you have a deeply nested workflow, and an entry like 'character_name: ?generate_base_image.character_name', then we will just search up through parents until we hit a workflow called
# 'generate_base_image', and then return the `character_name` value from there.
# With this, we can nest workflows however deeply we want without having to worry about directory structure.