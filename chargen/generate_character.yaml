# Value Groups
model_values: &model_values
  load_checkpoint.ckpt_name: "model.safetensors"

upscale_model_values: &upscale_model_values
  Load Upscale Model.model_name: "ESRGAN_4x.pth"

# Common workflows
upscale_workflow: &upscale_workflow
  path: "upscaler.json"
  values:
    upscale_amount: 0.5
  input:
    <<: *upscale_model_values
    Load Image.image: "{^.output.save_image.filename}"
    Upscale Image By.scale_by: $upscale_amount
    test: $^.resolution.width
  output:
    save_image:
      node: "Save Image"
      filename: "{^.output.save_image.filename}.upscaled"

globals:
  style: 
    positive: "masterpiece, best quality, beautiful"
    negative: "ugly, gross, bad, worst quality"
  image_description:
    positive: "A cute {{red|blue|purple}} {species} {pose}"
    negative: ""
  pose: "sitting on a bench"
  species: "puppy"

workflows:
  generate_base_image:
    path: "chargen_worflow.json"
    values:
      id: "base_image"
      additional_prompt:
        positive: "eyes open, {{red|blue}} eyes"
      resolution:
        width: 512
        height: 1024
    input:
      <<: *model_values
      # $7.text: "..." # We can refer to nodes by their ID to avoid ambiguity, if we want.
      positive_prompt.text: "{style.positive}, {image_description.positive}"
      negative_prompt.text: "{style.negative}"
      empty_image: # We can refer to Nodes as dicts and assign their properties as key:val pairs.
        width: $resolution.width # "$varname" syntax will copy the value directly, without converting to a string. Good for numbers.
        height: $resolution.height
    output:
      save_image:
        node: "save_image"
        filename: "/base_image/{species}_{id}"

    workflows:
      upscale:
        <<: *upscale_workflow
